// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::DOMElement;
use crate::DOMEventTarget;
use crate::DOMHTMLElement;
use crate::DOMNode;
use crate::DOMObject;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "WebKitDOMHTMLBodyElement")]
    pub struct DOMHTMLBodyElement(Object<ffi::WebKitDOMHTMLBodyElement, ffi::WebKitDOMHTMLBodyElementClass>) @extends DOMHTMLElement, DOMElement, DOMNode, DOMObject, @implements DOMEventTarget;

    match fn {
        type_ => || ffi::webkit_dom_html_body_element_get_type(),
    }
}

impl DOMHTMLBodyElement {
        pub const NONE: Option<&'static DOMHTMLBodyElement> = None;
    
}

pub trait DOMHTMLBodyElementExt: 'static {
    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_body_element_get_a_link")]
    #[doc(alias = "get_a_link")]
    fn a_link(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_body_element_get_background")]
    #[doc(alias = "get_background")]
    fn background(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_body_element_get_bg_color")]
    #[doc(alias = "get_bg_color")]
    fn bg_color(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_body_element_get_link")]
    #[doc(alias = "get_link")]
    fn link(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_body_element_get_text")]
    #[doc(alias = "get_text")]
    fn text(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_body_element_get_v_link")]
    #[doc(alias = "get_v_link")]
    fn v_link(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_body_element_set_a_link")]
    fn set_a_link(&self, value: &str);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_body_element_set_background")]
    fn set_background(&self, value: &str);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_body_element_set_bg_color")]
    fn set_bg_color(&self, value: &str);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_body_element_set_link")]
    fn set_link(&self, value: &str);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_body_element_set_text")]
    fn set_text(&self, value: &str);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_body_element_set_v_link")]
    fn set_v_link(&self, value: &str);

    #[doc(alias = "a-link")]
    fn connect_a_link_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "background")]
    fn connect_background_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "bg-color")]
    fn connect_bg_color_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "link")]
    fn connect_link_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "text")]
    fn connect_text_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "v-link")]
    fn connect_v_link_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DOMHTMLBodyElement>> DOMHTMLBodyElementExt for O {
    fn a_link(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_body_element_get_a_link(self.as_ref().to_glib_none().0))
        }
    }

    fn background(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_body_element_get_background(self.as_ref().to_glib_none().0))
        }
    }

    fn bg_color(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_body_element_get_bg_color(self.as_ref().to_glib_none().0))
        }
    }

    fn link(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_body_element_get_link(self.as_ref().to_glib_none().0))
        }
    }

    fn text(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_body_element_get_text(self.as_ref().to_glib_none().0))
        }
    }

    fn v_link(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_body_element_get_v_link(self.as_ref().to_glib_none().0))
        }
    }

    fn set_a_link(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_body_element_set_a_link(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_background(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_body_element_set_background(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_bg_color(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_body_element_set_bg_color(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_link(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_body_element_set_link(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_text(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_body_element_set_text(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_v_link(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_body_element_set_v_link(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn connect_a_link_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_a_link_trampoline<P: IsA<DOMHTMLBodyElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLBodyElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLBodyElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::a-link\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_a_link_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_background_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_background_trampoline<P: IsA<DOMHTMLBodyElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLBodyElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLBodyElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::background\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_background_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_bg_color_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_bg_color_trampoline<P: IsA<DOMHTMLBodyElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLBodyElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLBodyElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::bg-color\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_bg_color_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_link_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_link_trampoline<P: IsA<DOMHTMLBodyElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLBodyElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLBodyElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::link\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_link_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_text_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_text_trampoline<P: IsA<DOMHTMLBodyElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLBodyElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLBodyElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::text\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_text_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_v_link_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_v_link_trampoline<P: IsA<DOMHTMLBodyElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLBodyElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLBodyElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::v-link\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_v_link_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for DOMHTMLBodyElement {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DOMHTMLBodyElement")
    }
}
