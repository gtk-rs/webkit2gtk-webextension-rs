// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

#[cfg(any(feature = "v2_16", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
use crate::DOMCSSStyleDeclaration;
#[cfg(any(feature = "v2_16", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
use crate::DOMDOMSelection;
use crate::DOMDocument;
use crate::DOMElement;
use crate::DOMEventTarget;
use crate::DOMObject;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "WebKitDOMDOMWindow")]
    pub struct DOMDOMWindow(Object<ffi::WebKitDOMDOMWindow, ffi::WebKitDOMDOMWindowClass>) @extends DOMObject, @implements DOMEventTarget;

    match fn {
        type_ => || ffi::webkit_dom_dom_window_get_type(),
    }
}

impl DOMDOMWindow {
        pub const NONE: Option<&'static DOMDOMWindow> = None;
    
}

pub trait DOMDOMWindowExt: 'static {
    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_alert")]
    fn alert(&self, message: &str);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_blur")]
    fn blur(&self);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_capture_events")]
    fn capture_events(&self);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_close")]
    fn close(&self);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_confirm")]
    fn confirm(&self, message: &str) -> bool;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_find")]
    fn find(&self, string: &str, caseSensitive: bool, backwards: bool, wrap: bool, wholeWord: bool, searchInFrames: bool, showDialog: bool) -> bool;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_focus")]
    fn focus(&self);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_closed")]
    #[doc(alias = "get_closed")]
    fn is_closed(&self) -> bool;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_computed_style")]
    #[doc(alias = "get_computed_style")]
    fn computed_style(&self, element: &impl IsA<DOMElement>, pseudoElement: Option<&str>) -> Option<DOMCSSStyleDeclaration>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_default_status")]
    #[doc(alias = "get_default_status")]
    fn default_status(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_device_pixel_ratio")]
    #[doc(alias = "get_device_pixel_ratio")]
    fn device_pixel_ratio(&self) -> f64;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_document")]
    #[doc(alias = "get_document")]
    fn document(&self) -> Option<DOMDocument>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_frame_element")]
    #[doc(alias = "get_frame_element")]
    fn frame_element(&self) -> Option<DOMElement>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_frames")]
    #[doc(alias = "get_frames")]
#[must_use]
    fn frames(&self) -> Option<DOMDOMWindow>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_inner_height")]
    #[doc(alias = "get_inner_height")]
    fn inner_height(&self) -> libc::c_long;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_inner_width")]
    #[doc(alias = "get_inner_width")]
    fn inner_width(&self) -> libc::c_long;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_length")]
    #[doc(alias = "get_length")]
    fn length(&self) -> libc::c_ulong;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_offscreen_buffering")]
    #[doc(alias = "get_offscreen_buffering")]
    fn is_offscreen_buffering(&self) -> bool;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_opener")]
    #[doc(alias = "get_opener")]
#[must_use]
    fn opener(&self) -> Option<DOMDOMWindow>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_orientation")]
    #[doc(alias = "get_orientation")]
    fn orientation(&self) -> libc::c_long;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_outer_height")]
    #[doc(alias = "get_outer_height")]
    fn outer_height(&self) -> libc::c_long;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_outer_width")]
    #[doc(alias = "get_outer_width")]
    fn outer_width(&self) -> libc::c_long;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_page_x_offset")]
    #[doc(alias = "get_page_x_offset")]
    fn page_x_offset(&self) -> libc::c_long;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_page_y_offset")]
    #[doc(alias = "get_page_y_offset")]
    fn page_y_offset(&self) -> libc::c_long;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_parent")]
    #[doc(alias = "get_parent")]
#[must_use]
    fn parent(&self) -> Option<DOMDOMWindow>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_screen_left")]
    #[doc(alias = "get_screen_left")]
    fn screen_left(&self) -> libc::c_long;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_screen_top")]
    #[doc(alias = "get_screen_top")]
    fn screen_top(&self) -> libc::c_long;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_screen_x")]
    #[doc(alias = "get_screen_x")]
    fn screen_x(&self) -> libc::c_long;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_screen_y")]
    #[doc(alias = "get_screen_y")]
    fn screen_y(&self) -> libc::c_long;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_scroll_x")]
    #[doc(alias = "get_scroll_x")]
    fn scroll_x(&self) -> libc::c_long;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_scroll_y")]
    #[doc(alias = "get_scroll_y")]
    fn scroll_y(&self) -> libc::c_long;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_selection")]
    #[doc(alias = "get_selection")]
    fn selection(&self) -> Option<DOMDOMSelection>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_self")]
    #[doc(alias = "get_self")]
#[must_use]
    fn self_(&self) -> Option<DOMDOMWindow>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_status")]
    #[doc(alias = "get_status")]
    fn status(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_top")]
    #[doc(alias = "get_top")]
#[must_use]
    fn top(&self) -> Option<DOMDOMWindow>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_get_window")]
    #[doc(alias = "get_window")]
#[must_use]
    fn window(&self) -> Option<DOMDOMWindow>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_move_by")]
    fn move_by(&self, x: f32, y: f32);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_move_to")]
    fn move_to(&self, x: f32, y: f32);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_print")]
    fn print(&self);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_prompt")]
    fn prompt(&self, message: &str, defaultValue: &str) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_release_events")]
    fn release_events(&self);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_resize_by")]
    fn resize_by(&self, x: f32, y: f32);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_resize_to")]
    fn resize_to(&self, width: f32, height: f32);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_scroll_by")]
    fn scroll_by(&self, x: f64, y: f64);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_scroll_to")]
    fn scroll_to(&self, x: f64, y: f64);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_set_default_status")]
    fn set_default_status(&self, value: &str);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_set_name")]
    fn set_name(&self, value: &str);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_set_status")]
    fn set_status(&self, value: &str);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_dom_dom_window_stop")]
    fn stop(&self);

    #[doc(alias = "webkit_dom_dom_window_webkit_message_handlers_post_message")]
    fn webkit_message_handlers_post_message(&self, handler: &str, message: &str) -> bool;

    fn get_property_closed(&self) -> bool;

    #[doc(alias = "default-status")]
    fn get_property_default_status(&self) -> Option<glib::GString>;

    #[doc(alias = "default-status")]
    fn set_property_default_status(&self, default_status: Option<&str>);

    #[doc(alias = "device-pixel-ratio")]
    fn get_property_device_pixel_ratio(&self) -> f64;

    fn get_property_document(&self) -> Option<DOMDocument>;

    #[doc(alias = "frame-element")]
    fn get_property_frame_element(&self) -> Option<DOMElement>;

    fn get_property_frames(&self) -> Option<DOMDOMWindow>;

    #[doc(alias = "inner-height")]
    fn get_property_inner_height(&self) -> libc::c_long;

    #[doc(alias = "inner-width")]
    fn get_property_inner_width(&self) -> libc::c_long;

    fn get_property_length(&self) -> libc::c_ulong;

    fn get_property_name(&self) -> Option<glib::GString>;

    fn set_property_name(&self, name: Option<&str>);

    #[doc(alias = "offscreen-buffering")]
    fn get_property_offscreen_buffering(&self) -> bool;

    fn get_property_opener(&self) -> Option<DOMDOMWindow>;

    fn get_property_orientation(&self) -> libc::c_long;

    #[doc(alias = "outer-height")]
    fn get_property_outer_height(&self) -> libc::c_long;

    #[doc(alias = "outer-width")]
    fn get_property_outer_width(&self) -> libc::c_long;

    #[doc(alias = "page-x-offset")]
    fn get_property_page_x_offset(&self) -> libc::c_long;

    #[doc(alias = "page-y-offset")]
    fn get_property_page_y_offset(&self) -> libc::c_long;

    fn get_property_parent(&self) -> Option<DOMDOMWindow>;

    #[doc(alias = "screen-left")]
    fn get_property_screen_left(&self) -> libc::c_long;

    #[doc(alias = "screen-top")]
    fn get_property_screen_top(&self) -> libc::c_long;

    #[doc(alias = "screen-x")]
    fn get_property_screen_x(&self) -> libc::c_long;

    #[doc(alias = "screen-y")]
    fn get_property_screen_y(&self) -> libc::c_long;

    #[doc(alias = "scroll-x")]
    fn get_property_scroll_x(&self) -> libc::c_long;

    #[doc(alias = "scroll-y")]
    fn get_property_scroll_y(&self) -> libc::c_long;

    #[doc(alias = "self")]
    fn get_property_self(&self) -> Option<DOMDOMWindow>;

    fn get_property_status(&self) -> Option<glib::GString>;

    fn set_property_status(&self, status: Option<&str>);

    fn get_property_top(&self) -> Option<DOMDOMWindow>;

    fn get_property_window(&self) -> Option<DOMDOMWindow>;

    #[doc(alias = "closed")]
    fn connect_closed_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "default-status")]
    fn connect_default_status_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "device-pixel-ratio")]
    fn connect_device_pixel_ratio_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "document")]
    fn connect_document_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "frame-element")]
    fn connect_frame_element_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "frames")]
    fn connect_frames_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "inner-height")]
    fn connect_inner_height_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "inner-width")]
    fn connect_inner_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "length")]
    fn connect_length_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "name")]
    fn connect_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "offscreen-buffering")]
    fn connect_offscreen_buffering_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "opener")]
    fn connect_opener_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "orientation")]
    fn connect_orientation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "outer-height")]
    fn connect_outer_height_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "outer-width")]
    fn connect_outer_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "page-x-offset")]
    fn connect_page_x_offset_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "page-y-offset")]
    fn connect_page_y_offset_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "parent")]
    fn connect_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "screen-left")]
    fn connect_screen_left_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "screen-top")]
    fn connect_screen_top_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "screen-x")]
    fn connect_screen_x_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "screen-y")]
    fn connect_screen_y_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "scroll-x")]
    fn connect_scroll_x_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "scroll-y")]
    fn connect_scroll_y_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "self")]
    fn connect_self_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "status")]
    fn connect_status_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "top")]
    fn connect_top_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "window")]
    fn connect_window_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DOMDOMWindow>> DOMDOMWindowExt for O {
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn alert(&self, message: &str) {
        unsafe {
            ffi::webkit_dom_dom_window_alert(self.as_ref().to_glib_none().0, message.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn blur(&self) {
        unsafe {
            ffi::webkit_dom_dom_window_blur(self.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn capture_events(&self) {
        unsafe {
            ffi::webkit_dom_dom_window_capture_events(self.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn close(&self) {
        unsafe {
            ffi::webkit_dom_dom_window_close(self.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn confirm(&self, message: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_dom_window_confirm(self.as_ref().to_glib_none().0, message.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn find(&self, string: &str, caseSensitive: bool, backwards: bool, wrap: bool, wholeWord: bool, searchInFrames: bool, showDialog: bool) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_dom_window_find(self.as_ref().to_glib_none().0, string.to_glib_none().0, caseSensitive.into_glib(), backwards.into_glib(), wrap.into_glib(), wholeWord.into_glib(), searchInFrames.into_glib(), showDialog.into_glib()))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn focus(&self) {
        unsafe {
            ffi::webkit_dom_dom_window_focus(self.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn is_closed(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_dom_window_get_closed(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn computed_style(&self, element: &impl IsA<DOMElement>, pseudoElement: Option<&str>) -> Option<DOMCSSStyleDeclaration> {
        unsafe {
            from_glib_full(ffi::webkit_dom_dom_window_get_computed_style(self.as_ref().to_glib_none().0, element.as_ref().to_glib_none().0, pseudoElement.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn default_status(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_dom_window_get_default_status(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn device_pixel_ratio(&self) -> f64 {
        unsafe {
            ffi::webkit_dom_dom_window_get_device_pixel_ratio(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn document(&self) -> Option<DOMDocument> {
        unsafe {
            from_glib_none(ffi::webkit_dom_dom_window_get_document(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn frame_element(&self) -> Option<DOMElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_dom_window_get_frame_element(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn frames(&self) -> Option<DOMDOMWindow> {
        unsafe {
            from_glib_full(ffi::webkit_dom_dom_window_get_frames(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn inner_height(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_inner_height(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn inner_width(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_inner_width(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn length(&self) -> libc::c_ulong {
        unsafe {
            ffi::webkit_dom_dom_window_get_length(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_dom_window_get_name(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn is_offscreen_buffering(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_dom_window_get_offscreen_buffering(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn opener(&self) -> Option<DOMDOMWindow> {
        unsafe {
            from_glib_full(ffi::webkit_dom_dom_window_get_opener(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn orientation(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_orientation(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn outer_height(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_outer_height(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn outer_width(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_outer_width(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn page_x_offset(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_page_x_offset(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn page_y_offset(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_page_y_offset(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn parent(&self) -> Option<DOMDOMWindow> {
        unsafe {
            from_glib_full(ffi::webkit_dom_dom_window_get_parent(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn screen_left(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_screen_left(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn screen_top(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_screen_top(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn screen_x(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_screen_x(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn screen_y(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_screen_y(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn scroll_x(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_scroll_x(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn scroll_y(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_dom_window_get_scroll_y(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn selection(&self) -> Option<DOMDOMSelection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_dom_window_get_selection(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn self_(&self) -> Option<DOMDOMWindow> {
        unsafe {
            from_glib_full(ffi::webkit_dom_dom_window_get_self(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn status(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_dom_window_get_status(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn top(&self) -> Option<DOMDOMWindow> {
        unsafe {
            from_glib_full(ffi::webkit_dom_dom_window_get_top(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn window(&self) -> Option<DOMDOMWindow> {
        unsafe {
            from_glib_full(ffi::webkit_dom_dom_window_get_window(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn move_by(&self, x: f32, y: f32) {
        unsafe {
            ffi::webkit_dom_dom_window_move_by(self.as_ref().to_glib_none().0, x, y);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn move_to(&self, x: f32, y: f32) {
        unsafe {
            ffi::webkit_dom_dom_window_move_to(self.as_ref().to_glib_none().0, x, y);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn print(&self) {
        unsafe {
            ffi::webkit_dom_dom_window_print(self.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn prompt(&self, message: &str, defaultValue: &str) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_dom_window_prompt(self.as_ref().to_glib_none().0, message.to_glib_none().0, defaultValue.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn release_events(&self) {
        unsafe {
            ffi::webkit_dom_dom_window_release_events(self.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn resize_by(&self, x: f32, y: f32) {
        unsafe {
            ffi::webkit_dom_dom_window_resize_by(self.as_ref().to_glib_none().0, x, y);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn resize_to(&self, width: f32, height: f32) {
        unsafe {
            ffi::webkit_dom_dom_window_resize_to(self.as_ref().to_glib_none().0, width, height);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn scroll_by(&self, x: f64, y: f64) {
        unsafe {
            ffi::webkit_dom_dom_window_scroll_by(self.as_ref().to_glib_none().0, x, y);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn scroll_to(&self, x: f64, y: f64) {
        unsafe {
            ffi::webkit_dom_dom_window_scroll_to(self.as_ref().to_glib_none().0, x, y);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn set_default_status(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_dom_window_set_default_status(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn set_name(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_dom_window_set_name(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn set_status(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_dom_window_set_status(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_16")))]
    fn stop(&self) {
        unsafe {
            ffi::webkit_dom_dom_window_stop(self.as_ref().to_glib_none().0);
        }
    }

    fn webkit_message_handlers_post_message(&self, handler: &str, message: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_dom_window_webkit_message_handlers_post_message(self.as_ref().to_glib_none().0, handler.to_glib_none().0, message.to_glib_none().0))
        }
    }

    fn get_property_closed(&self) -> bool {
        glib::ObjectExt::property(self.as_ref(), "closed")
    }

    fn get_property_default_status(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self.as_ref(), "default-status")
    }

    fn set_property_default_status(&self, default_status: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(),"default-status", &default_status)
    }

    fn get_property_device_pixel_ratio(&self) -> f64 {
        glib::ObjectExt::property(self.as_ref(), "device-pixel-ratio")
    }

    fn get_property_document(&self) -> Option<DOMDocument> {
        glib::ObjectExt::property(self.as_ref(), "document")
    }

    fn get_property_frame_element(&self) -> Option<DOMElement> {
        glib::ObjectExt::property(self.as_ref(), "frame-element")
    }

    fn get_property_frames(&self) -> Option<DOMDOMWindow> {
        glib::ObjectExt::property(self.as_ref(), "frames")
    }

    fn get_property_inner_height(&self) -> libc::c_long {
        glib::ObjectExt::property(self.as_ref(), "inner-height")
    }

    fn get_property_inner_width(&self) -> libc::c_long {
        glib::ObjectExt::property(self.as_ref(), "inner-width")
    }

    fn get_property_length(&self) -> libc::c_ulong {
        glib::ObjectExt::property(self.as_ref(), "length")
    }

    fn get_property_name(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self.as_ref(), "name")
    }

    fn set_property_name(&self, name: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(),"name", &name)
    }

    fn get_property_offscreen_buffering(&self) -> bool {
        glib::ObjectExt::property(self.as_ref(), "offscreen-buffering")
    }

    fn get_property_opener(&self) -> Option<DOMDOMWindow> {
        glib::ObjectExt::property(self.as_ref(), "opener")
    }

    fn get_property_orientation(&self) -> libc::c_long {
        glib::ObjectExt::property(self.as_ref(), "orientation")
    }

    fn get_property_outer_height(&self) -> libc::c_long {
        glib::ObjectExt::property(self.as_ref(), "outer-height")
    }

    fn get_property_outer_width(&self) -> libc::c_long {
        glib::ObjectExt::property(self.as_ref(), "outer-width")
    }

    fn get_property_page_x_offset(&self) -> libc::c_long {
        glib::ObjectExt::property(self.as_ref(), "page-x-offset")
    }

    fn get_property_page_y_offset(&self) -> libc::c_long {
        glib::ObjectExt::property(self.as_ref(), "page-y-offset")
    }

    fn get_property_parent(&self) -> Option<DOMDOMWindow> {
        glib::ObjectExt::property(self.as_ref(), "parent")
    }

    fn get_property_screen_left(&self) -> libc::c_long {
        glib::ObjectExt::property(self.as_ref(), "screen-left")
    }

    fn get_property_screen_top(&self) -> libc::c_long {
        glib::ObjectExt::property(self.as_ref(), "screen-top")
    }

    fn get_property_screen_x(&self) -> libc::c_long {
        glib::ObjectExt::property(self.as_ref(), "screen-x")
    }

    fn get_property_screen_y(&self) -> libc::c_long {
        glib::ObjectExt::property(self.as_ref(), "screen-y")
    }

    fn get_property_scroll_x(&self) -> libc::c_long {
        glib::ObjectExt::property(self.as_ref(), "scroll-x")
    }

    fn get_property_scroll_y(&self) -> libc::c_long {
        glib::ObjectExt::property(self.as_ref(), "scroll-y")
    }

    fn get_property_self(&self) -> Option<DOMDOMWindow> {
        glib::ObjectExt::property(self.as_ref(), "self")
    }

    fn get_property_status(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self.as_ref(), "status")
    }

    fn set_property_status(&self, status: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(),"status", &status)
    }

    fn get_property_top(&self) -> Option<DOMDOMWindow> {
        glib::ObjectExt::property(self.as_ref(), "top")
    }

    fn get_property_window(&self) -> Option<DOMDOMWindow> {
        glib::ObjectExt::property(self.as_ref(), "window")
    }

    fn connect_closed_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_closed_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::closed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_closed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_default_status_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_default_status_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::default-status\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_default_status_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_device_pixel_ratio_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_device_pixel_ratio_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::device-pixel-ratio\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_device_pixel_ratio_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_document_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_document_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::document\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_document_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_frame_element_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_frame_element_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::frame-element\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_frame_element_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_frames_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_frames_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::frames\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_frames_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_inner_height_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_inner_height_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::inner-height\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_inner_height_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_inner_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_inner_width_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::inner-width\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_inner_width_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_length_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_length_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::length\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_length_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_name_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_offscreen_buffering_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_offscreen_buffering_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::offscreen-buffering\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_offscreen_buffering_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_opener_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_opener_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::opener\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_opener_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_orientation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_orientation_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::orientation\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_orientation_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_outer_height_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_outer_height_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::outer-height\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_outer_height_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_outer_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_outer_width_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::outer-width\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_outer_width_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_page_x_offset_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_page_x_offset_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::page-x-offset\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_page_x_offset_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_page_y_offset_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_page_y_offset_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::page-y-offset\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_page_y_offset_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_parent_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::parent\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_parent_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_screen_left_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_screen_left_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::screen-left\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_screen_left_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_screen_top_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_screen_top_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::screen-top\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_screen_top_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_screen_x_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_screen_x_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::screen-x\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_screen_x_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_screen_y_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_screen_y_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::screen-y\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_screen_y_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_scroll_x_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_scroll_x_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::scroll-x\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_scroll_x_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_scroll_y_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_scroll_y_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::scroll-y\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_scroll_y_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_self_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_self_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::self\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_self_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_status_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_status_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::status\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_status_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_top_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_top_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::top\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_top_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_window_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_window_trampoline<P: IsA<DOMDOMWindow>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMDOMWindow, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMDOMWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::window\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_window_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for DOMDOMWindow {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DOMDOMWindow")
    }
}
