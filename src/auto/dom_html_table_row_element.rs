// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::DOMElement;
use crate::DOMEventTarget;
use crate::DOMHTMLCollection;
use crate::DOMHTMLElement;
use crate::DOMNode;
use crate::DOMObject;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "WebKitDOMHTMLTableRowElement")]
    pub struct DOMHTMLTableRowElement(Object<ffi::WebKitDOMHTMLTableRowElement, ffi::WebKitDOMHTMLTableRowElementClass>) @extends DOMHTMLElement, DOMElement, DOMNode, DOMObject, @implements DOMEventTarget;

    match fn {
        type_ => || ffi::webkit_dom_html_table_row_element_get_type(),
    }
}

impl DOMHTMLTableRowElement {
        pub const NONE: Option<&'static DOMHTMLTableRowElement> = None;
    
}

pub trait DOMHTMLTableRowElementExt: 'static {
    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_row_element_delete_cell")]
    fn delete_cell(&self, index: libc::c_long) -> Result<(), glib::Error>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_row_element_get_align")]
    #[doc(alias = "get_align")]
    fn align(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_row_element_get_bg_color")]
    #[doc(alias = "get_bg_color")]
    fn bg_color(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_row_element_get_cells")]
    #[doc(alias = "get_cells")]
    fn cells(&self) -> Option<DOMHTMLCollection>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_row_element_get_ch")]
    #[doc(alias = "get_ch")]
    fn ch(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_row_element_get_ch_off")]
    #[doc(alias = "get_ch_off")]
    fn ch_off(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_row_element_get_row_index")]
    #[doc(alias = "get_row_index")]
    fn row_index(&self) -> libc::c_long;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_row_element_get_section_row_index")]
    #[doc(alias = "get_section_row_index")]
    fn section_row_index(&self) -> libc::c_long;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_row_element_get_v_align")]
    #[doc(alias = "get_v_align")]
    fn v_align(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_row_element_insert_cell")]
    fn insert_cell(&self, index: libc::c_long) -> Result<DOMHTMLElement, glib::Error>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_row_element_set_align")]
    fn set_align(&self, value: &str);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_row_element_set_bg_color")]
    fn set_bg_color(&self, value: &str);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_row_element_set_ch")]
    fn set_ch(&self, value: &str);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_row_element_set_ch_off")]
    fn set_ch_off(&self, value: &str);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_row_element_set_v_align")]
    fn set_v_align(&self, value: &str);

    #[doc(alias = "align")]
    fn connect_align_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "bg-color")]
    fn connect_bg_color_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "cells")]
    fn connect_cells_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "ch")]
    fn connect_ch_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "ch-off")]
    fn connect_ch_off_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "row-index")]
    fn connect_row_index_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "section-row-index")]
    fn connect_section_row_index_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "v-align")]
    fn connect_v_align_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DOMHTMLTableRowElement>> DOMHTMLTableRowElementExt for O {
    fn delete_cell(&self, index: libc::c_long) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_html_table_row_element_delete_cell(self.as_ref().to_glib_none().0, index, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn align(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_row_element_get_align(self.as_ref().to_glib_none().0))
        }
    }

    fn bg_color(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_row_element_get_bg_color(self.as_ref().to_glib_none().0))
        }
    }

    fn cells(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_row_element_get_cells(self.as_ref().to_glib_none().0))
        }
    }

    fn ch(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_row_element_get_ch(self.as_ref().to_glib_none().0))
        }
    }

    fn ch_off(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_row_element_get_ch_off(self.as_ref().to_glib_none().0))
        }
    }

    fn row_index(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_html_table_row_element_get_row_index(self.as_ref().to_glib_none().0)
        }
    }

    fn section_row_index(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_html_table_row_element_get_section_row_index(self.as_ref().to_glib_none().0)
        }
    }

    fn v_align(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_row_element_get_v_align(self.as_ref().to_glib_none().0))
        }
    }

    fn insert_cell(&self, index: libc::c_long) -> Result<DOMHTMLElement, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_html_table_row_element_insert_cell(self.as_ref().to_glib_none().0, index, &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_align(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_table_row_element_set_align(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_bg_color(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_table_row_element_set_bg_color(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_ch(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_table_row_element_set_ch(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_ch_off(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_table_row_element_set_ch_off(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_v_align(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_table_row_element_set_v_align(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn connect_align_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_align_trampoline<P: IsA<DOMHTMLTableRowElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTableRowElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTableRowElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::align\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_align_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_bg_color_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_bg_color_trampoline<P: IsA<DOMHTMLTableRowElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTableRowElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTableRowElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::bg-color\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_bg_color_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_cells_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cells_trampoline<P: IsA<DOMHTMLTableRowElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTableRowElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTableRowElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::cells\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_cells_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_ch_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_ch_trampoline<P: IsA<DOMHTMLTableRowElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTableRowElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTableRowElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::ch\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_ch_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_ch_off_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_ch_off_trampoline<P: IsA<DOMHTMLTableRowElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTableRowElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTableRowElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::ch-off\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_ch_off_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_row_index_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_row_index_trampoline<P: IsA<DOMHTMLTableRowElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTableRowElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTableRowElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::row-index\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_row_index_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_section_row_index_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_section_row_index_trampoline<P: IsA<DOMHTMLTableRowElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTableRowElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTableRowElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::section-row-index\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_section_row_index_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_v_align_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_v_align_trampoline<P: IsA<DOMHTMLTableRowElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTableRowElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTableRowElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::v-align\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_v_align_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for DOMHTMLTableRowElement {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DOMHTMLTableRowElement")
    }
}
