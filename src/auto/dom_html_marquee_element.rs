// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::DOMElement;
use crate::DOMEventTarget;
use crate::DOMHTMLElement;
use crate::DOMNode;
use crate::DOMObject;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "WebKitDOMHTMLMarqueeElement")]
    pub struct DOMHTMLMarqueeElement(Object<ffi::WebKitDOMHTMLMarqueeElement, ffi::WebKitDOMHTMLMarqueeElementClass>) @extends DOMHTMLElement, DOMElement, DOMNode, DOMObject, @implements DOMEventTarget;

    match fn {
        type_ => || ffi::webkit_dom_html_marquee_element_get_type(),
    }
}

impl DOMHTMLMarqueeElement {
        pub const NONE: Option<&'static DOMHTMLMarqueeElement> = None;
    
}

pub trait DOMHTMLMarqueeElementExt: 'static {
    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_marquee_element_start")]
    fn start(&self);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_marquee_element_stop")]
    fn stop(&self);
}

impl<O: IsA<DOMHTMLMarqueeElement>> DOMHTMLMarqueeElementExt for O {
    fn start(&self) {
        unsafe {
            ffi::webkit_dom_html_marquee_element_start(self.as_ref().to_glib_none().0);
        }
    }

    fn stop(&self) {
        unsafe {
            ffi::webkit_dom_html_marquee_element_stop(self.as_ref().to_glib_none().0);
        }
    }
}

impl fmt::Display for DOMHTMLMarqueeElement {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DOMHTMLMarqueeElement")
    }
}
