// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use glib::object::IsA;
#[cfg(any(feature = "v2_28", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_28")))]
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "WebKitUserMessage")]
    pub struct UserMessage(Object<ffi::WebKitUserMessage, ffi::WebKitUserMessageClass>);

    match fn {
        type_ => || ffi::webkit_user_message_get_type(),
    }
}

impl UserMessage {
        pub const NONE: Option<&'static UserMessage> = None;
    

    #[cfg(any(feature = "v2_28", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_28")))]
    #[doc(alias = "webkit_user_message_new")]
    pub fn new(name: &str, parameters: Option<&glib::Variant>) -> UserMessage {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::webkit_user_message_new(name.to_glib_none().0, parameters.to_glib_none().0))
        }
    }

    //#[cfg(any(feature = "v2_28", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_28")))]
    //#[doc(alias = "webkit_user_message_new_with_fd_list")]
    //#[doc(alias = "new_with_fd_list")]
    //pub fn with_fd_list(name: &str, parameters: Option<&glib::Variant>, fd_list: /*Ignored*/Option<&gio::UnixFDList>) -> UserMessage {
    //    unsafe { TODO: call ffi:webkit_user_message_new_with_fd_list() }
    //}

    //#[doc(alias = "webkit_user_message_error_quark")]
    //pub fn error_quark() -> /*Ignored*/glib::Quark {
    //    unsafe { TODO: call ffi:webkit_user_message_error_quark() }
    //}
}

pub trait UserMessageExt: 'static {
    //#[cfg(any(feature = "v2_28", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_28")))]
    //#[doc(alias = "webkit_user_message_get_fd_list")]
    //#[doc(alias = "get_fd_list")]
    //fn fd_list(&self) -> /*Ignored*/Option<gio::UnixFDList>;

    #[cfg(any(feature = "v2_28", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_28")))]
    #[doc(alias = "webkit_user_message_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString>;

    #[cfg(any(feature = "v2_28", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_28")))]
    #[doc(alias = "webkit_user_message_get_parameters")]
    #[doc(alias = "get_parameters")]
    fn parameters(&self) -> Option<glib::Variant>;

    #[cfg(any(feature = "v2_28", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_28")))]
    #[doc(alias = "webkit_user_message_send_reply")]
    fn send_reply(&self, reply: &impl IsA<UserMessage>);
}

impl<O: IsA<UserMessage>> UserMessageExt for O {
    //#[cfg(any(feature = "v2_28", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_28")))]
    //fn fd_list(&self) -> /*Ignored*/Option<gio::UnixFDList> {
    //    unsafe { TODO: call ffi:webkit_user_message_get_fd_list() }
    //}

    #[cfg(any(feature = "v2_28", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_28")))]
    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::webkit_user_message_get_name(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_28", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_28")))]
    fn parameters(&self) -> Option<glib::Variant> {
        unsafe {
            from_glib_none(ffi::webkit_user_message_get_parameters(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_28", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_28")))]
    fn send_reply(&self, reply: &impl IsA<UserMessage>) {
        unsafe {
            ffi::webkit_user_message_send_reply(self.as_ref().to_glib_none().0, reply.as_ref().to_glib_none().0);
        }
    }
}

impl fmt::Display for UserMessage {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("UserMessage")
    }
}
