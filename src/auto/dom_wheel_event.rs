// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::DOMDOMWindow;
use crate::DOMEvent;
use crate::DOMMouseEvent;
use crate::DOMObject;
use crate::DOMUIEvent;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "WebKitDOMWheelEvent")]
    pub struct DOMWheelEvent(Object<ffi::WebKitDOMWheelEvent, ffi::WebKitDOMWheelEventClass>) @extends DOMMouseEvent, DOMUIEvent, DOMEvent, DOMObject;

    match fn {
        type_ => || ffi::webkit_dom_wheel_event_get_type(),
    }
}

impl DOMWheelEvent {
        pub const NONE: Option<&'static DOMWheelEvent> = None;
    
}

pub trait DOMWheelEventExt: 'static {
    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_wheel_event_get_wheel_delta")]
    #[doc(alias = "get_wheel_delta")]
    fn wheel_delta(&self) -> libc::c_long;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_wheel_event_get_wheel_delta_x")]
    #[doc(alias = "get_wheel_delta_x")]
    fn wheel_delta_x(&self) -> libc::c_long;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_wheel_event_get_wheel_delta_y")]
    #[doc(alias = "get_wheel_delta_y")]
    fn wheel_delta_y(&self) -> libc::c_long;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_wheel_event_init_wheel_event")]
    fn init_wheel_event(&self, wheelDeltaX: libc::c_long, wheelDeltaY: libc::c_long, view: &impl IsA<DOMDOMWindow>, screenX: libc::c_long, screenY: libc::c_long, clientX: libc::c_long, clientY: libc::c_long, ctrlKey: bool, altKey: bool, shiftKey: bool, metaKey: bool);

    #[doc(alias = "wheel-delta")]
    fn connect_wheel_delta_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "wheel-delta-x")]
    fn connect_wheel_delta_x_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "wheel-delta-y")]
    fn connect_wheel_delta_y_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DOMWheelEvent>> DOMWheelEventExt for O {
    fn wheel_delta(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_wheel_event_get_wheel_delta(self.as_ref().to_glib_none().0)
        }
    }

    fn wheel_delta_x(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_wheel_event_get_wheel_delta_x(self.as_ref().to_glib_none().0)
        }
    }

    fn wheel_delta_y(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_wheel_event_get_wheel_delta_y(self.as_ref().to_glib_none().0)
        }
    }

    fn init_wheel_event(&self, wheelDeltaX: libc::c_long, wheelDeltaY: libc::c_long, view: &impl IsA<DOMDOMWindow>, screenX: libc::c_long, screenY: libc::c_long, clientX: libc::c_long, clientY: libc::c_long, ctrlKey: bool, altKey: bool, shiftKey: bool, metaKey: bool) {
        unsafe {
            ffi::webkit_dom_wheel_event_init_wheel_event(self.as_ref().to_glib_none().0, wheelDeltaX, wheelDeltaY, view.as_ref().to_glib_none().0, screenX, screenY, clientX, clientY, ctrlKey.into_glib(), altKey.into_glib(), shiftKey.into_glib(), metaKey.into_glib());
        }
    }

    fn connect_wheel_delta_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_wheel_delta_trampoline<P: IsA<DOMWheelEvent>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMWheelEvent, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMWheelEvent::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::wheel-delta\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_wheel_delta_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_wheel_delta_x_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_wheel_delta_x_trampoline<P: IsA<DOMWheelEvent>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMWheelEvent, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMWheelEvent::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::wheel-delta-x\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_wheel_delta_x_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_wheel_delta_y_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_wheel_delta_y_trampoline<P: IsA<DOMWheelEvent>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMWheelEvent, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMWheelEvent::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::wheel-delta-y\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_wheel_delta_y_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for DOMWheelEvent {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DOMWheelEvent")
    }
}
