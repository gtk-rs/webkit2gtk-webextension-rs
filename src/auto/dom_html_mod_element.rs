// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::DOMElement;
use crate::DOMEventTarget;
use crate::DOMHTMLElement;
use crate::DOMNode;
use crate::DOMObject;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "WebKitDOMHTMLModElement")]
    pub struct DOMHTMLModElement(Object<ffi::WebKitDOMHTMLModElement, ffi::WebKitDOMHTMLModElementClass>) @extends DOMHTMLElement, DOMElement, DOMNode, DOMObject, @implements DOMEventTarget;

    match fn {
        type_ => || ffi::webkit_dom_html_mod_element_get_type(),
    }
}

impl DOMHTMLModElement {
        pub const NONE: Option<&'static DOMHTMLModElement> = None;
    
}

pub trait DOMHTMLModElementExt: 'static {
    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_mod_element_get_cite")]
    #[doc(alias = "get_cite")]
    fn cite(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_mod_element_get_date_time")]
    #[doc(alias = "get_date_time")]
    fn date_time(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_mod_element_set_cite")]
    fn set_cite(&self, value: &str);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_mod_element_set_date_time")]
    fn set_date_time(&self, value: &str);

    #[doc(alias = "cite")]
    fn connect_cite_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "date-time")]
    fn connect_date_time_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DOMHTMLModElement>> DOMHTMLModElementExt for O {
    fn cite(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_mod_element_get_cite(self.as_ref().to_glib_none().0))
        }
    }

    fn date_time(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_mod_element_get_date_time(self.as_ref().to_glib_none().0))
        }
    }

    fn set_cite(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_mod_element_set_cite(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_date_time(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_mod_element_set_date_time(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn connect_cite_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cite_trampoline<P: IsA<DOMHTMLModElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLModElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLModElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::cite\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_cite_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_date_time_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_date_time_trampoline<P: IsA<DOMHTMLModElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLModElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLModElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::date-time\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_date_time_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for DOMHTMLModElement {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DOMHTMLModElement")
    }
}
