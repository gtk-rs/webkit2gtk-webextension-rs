// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::DOMEventTarget;
use crate::DOMObject;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "WebKitDOMEvent")]
    pub struct DOMEvent(Object<ffi::WebKitDOMEvent, ffi::WebKitDOMEventClass>) @extends DOMObject;

    match fn {
        type_ => || ffi::webkit_dom_event_get_type(),
    }
}

impl DOMEvent {
        pub const NONE: Option<&'static DOMEvent> = None;
    
}

pub trait DOMEventExt: 'static {
    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_event_get_bubbles")]
    #[doc(alias = "get_bubbles")]
    fn is_bubbles(&self) -> bool;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_event_get_cancel_bubble")]
    #[doc(alias = "get_cancel_bubble")]
    fn is_cancel_bubble(&self) -> bool;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_event_get_cancelable")]
    #[doc(alias = "get_cancelable")]
    fn is_cancelable(&self) -> bool;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_event_get_current_target")]
    #[doc(alias = "get_current_target")]
    fn current_target(&self) -> Option<DOMEventTarget>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_event_get_event_phase")]
    #[doc(alias = "get_event_phase")]
    fn event_phase(&self) -> libc::c_ushort;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_event_get_event_type")]
    #[doc(alias = "get_event_type")]
    fn event_type(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_event_get_return_value")]
    #[doc(alias = "get_return_value")]
    fn is_return_value(&self) -> bool;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_event_get_src_element")]
    #[doc(alias = "get_src_element")]
    fn src_element(&self) -> Option<DOMEventTarget>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_event_get_target")]
    #[doc(alias = "get_target")]
    fn target(&self) -> Option<DOMEventTarget>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_event_get_time_stamp")]
    #[doc(alias = "get_time_stamp")]
    fn time_stamp(&self) -> u32;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_event_init_event")]
    fn init_event(&self, eventTypeArg: &str, canBubbleArg: bool, cancelableArg: bool);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_event_prevent_default")]
    fn prevent_default(&self);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_event_set_cancel_bubble")]
    fn set_cancel_bubble(&self, value: bool);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_event_set_return_value")]
    fn set_return_value(&self, value: bool);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_event_stop_propagation")]
    fn stop_propagation(&self);

    #[doc(alias = "type")]
    fn type_(&self) -> Option<glib::GString>;

    #[doc(alias = "bubbles")]
    fn connect_bubbles_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "cancel-bubble")]
    fn connect_cancel_bubble_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "cancelable")]
    fn connect_cancelable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "current-target")]
    fn connect_current_target_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "event-phase")]
    fn connect_event_phase_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "return-value")]
    fn connect_return_value_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "src-element")]
    fn connect_src_element_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "target")]
    fn connect_target_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "time-stamp")]
    fn connect_time_stamp_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "type")]
    fn connect_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DOMEvent>> DOMEventExt for O {
    fn is_bubbles(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_event_get_bubbles(self.as_ref().to_glib_none().0))
        }
    }

    fn is_cancel_bubble(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_event_get_cancel_bubble(self.as_ref().to_glib_none().0))
        }
    }

    fn is_cancelable(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_event_get_cancelable(self.as_ref().to_glib_none().0))
        }
    }

    fn current_target(&self) -> Option<DOMEventTarget> {
        unsafe {
            from_glib_full(ffi::webkit_dom_event_get_current_target(self.as_ref().to_glib_none().0))
        }
    }

    fn event_phase(&self) -> libc::c_ushort {
        unsafe {
            ffi::webkit_dom_event_get_event_phase(self.as_ref().to_glib_none().0)
        }
    }

    fn event_type(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_event_get_event_type(self.as_ref().to_glib_none().0))
        }
    }

    fn is_return_value(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_event_get_return_value(self.as_ref().to_glib_none().0))
        }
    }

    fn src_element(&self) -> Option<DOMEventTarget> {
        unsafe {
            from_glib_full(ffi::webkit_dom_event_get_src_element(self.as_ref().to_glib_none().0))
        }
    }

    fn target(&self) -> Option<DOMEventTarget> {
        unsafe {
            from_glib_full(ffi::webkit_dom_event_get_target(self.as_ref().to_glib_none().0))
        }
    }

    fn time_stamp(&self) -> u32 {
        unsafe {
            ffi::webkit_dom_event_get_time_stamp(self.as_ref().to_glib_none().0)
        }
    }

    fn init_event(&self, eventTypeArg: &str, canBubbleArg: bool, cancelableArg: bool) {
        unsafe {
            ffi::webkit_dom_event_init_event(self.as_ref().to_glib_none().0, eventTypeArg.to_glib_none().0, canBubbleArg.into_glib(), cancelableArg.into_glib());
        }
    }

    fn prevent_default(&self) {
        unsafe {
            ffi::webkit_dom_event_prevent_default(self.as_ref().to_glib_none().0);
        }
    }

    fn set_cancel_bubble(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_event_set_cancel_bubble(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    fn set_return_value(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_event_set_return_value(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    fn stop_propagation(&self) {
        unsafe {
            ffi::webkit_dom_event_stop_propagation(self.as_ref().to_glib_none().0);
        }
    }

    fn type_(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self.as_ref(), "type")
    }

    fn connect_bubbles_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_bubbles_trampoline<P: IsA<DOMEvent>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMEvent, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMEvent::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::bubbles\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_bubbles_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_cancel_bubble_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cancel_bubble_trampoline<P: IsA<DOMEvent>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMEvent, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMEvent::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::cancel-bubble\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_cancel_bubble_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_cancelable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cancelable_trampoline<P: IsA<DOMEvent>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMEvent, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMEvent::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::cancelable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_cancelable_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_current_target_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_current_target_trampoline<P: IsA<DOMEvent>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMEvent, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMEvent::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::current-target\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_current_target_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_event_phase_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_event_phase_trampoline<P: IsA<DOMEvent>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMEvent, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMEvent::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::event-phase\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_event_phase_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_return_value_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_return_value_trampoline<P: IsA<DOMEvent>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMEvent, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMEvent::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::return-value\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_return_value_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_src_element_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_src_element_trampoline<P: IsA<DOMEvent>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMEvent, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMEvent::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::src-element\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_src_element_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_target_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_target_trampoline<P: IsA<DOMEvent>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMEvent, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMEvent::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::target\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_target_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_time_stamp_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_time_stamp_trampoline<P: IsA<DOMEvent>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMEvent, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMEvent::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::time-stamp\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_time_stamp_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_type_trampoline<P: IsA<DOMEvent>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMEvent, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMEvent::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::type\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_type_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for DOMEvent {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DOMEvent")
    }
}
