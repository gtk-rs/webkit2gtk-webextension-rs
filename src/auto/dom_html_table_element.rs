// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::DOMElement;
use crate::DOMEventTarget;
use crate::DOMHTMLCollection;
use crate::DOMHTMLElement;
use crate::DOMHTMLTableCaptionElement;
use crate::DOMHTMLTableSectionElement;
use crate::DOMNode;
use crate::DOMObject;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "WebKitDOMHTMLTableElement")]
    pub struct DOMHTMLTableElement(Object<ffi::WebKitDOMHTMLTableElement, ffi::WebKitDOMHTMLTableElementClass>) @extends DOMHTMLElement, DOMElement, DOMNode, DOMObject, @implements DOMEventTarget;

    match fn {
        type_ => || ffi::webkit_dom_html_table_element_get_type(),
    }
}

impl DOMHTMLTableElement {
        pub const NONE: Option<&'static DOMHTMLTableElement> = None;
    
}

pub trait DOMHTMLTableElementExt: 'static {
    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_create_caption")]
    fn create_caption(&self) -> Option<DOMHTMLElement>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_create_t_foot")]
    fn create_t_foot(&self) -> Option<DOMHTMLElement>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_create_t_head")]
    fn create_t_head(&self) -> Option<DOMHTMLElement>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_delete_caption")]
    fn delete_caption(&self);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_delete_row")]
    fn delete_row(&self, index: libc::c_long) -> Result<(), glib::Error>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_delete_t_foot")]
    fn delete_t_foot(&self);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_delete_t_head")]
    fn delete_t_head(&self);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_get_align")]
    #[doc(alias = "get_align")]
    fn align(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_get_bg_color")]
    #[doc(alias = "get_bg_color")]
    fn bg_color(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_get_border")]
    #[doc(alias = "get_border")]
    fn border(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_get_caption")]
    #[doc(alias = "get_caption")]
    fn caption(&self) -> Option<DOMHTMLTableCaptionElement>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_get_cell_padding")]
    #[doc(alias = "get_cell_padding")]
    fn cell_padding(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_get_cell_spacing")]
    #[doc(alias = "get_cell_spacing")]
    fn cell_spacing(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_get_rows")]
    #[doc(alias = "get_rows")]
    fn rows(&self) -> Option<DOMHTMLCollection>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_get_rules")]
    #[doc(alias = "get_rules")]
    fn rules(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_get_summary")]
    #[doc(alias = "get_summary")]
    fn summary(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_get_t_bodies")]
    #[doc(alias = "get_t_bodies")]
    fn t_bodies(&self) -> Option<DOMHTMLCollection>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_get_t_foot")]
    #[doc(alias = "get_t_foot")]
    fn t_foot(&self) -> Option<DOMHTMLTableSectionElement>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_get_t_head")]
    #[doc(alias = "get_t_head")]
    fn t_head(&self) -> Option<DOMHTMLTableSectionElement>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_get_width")]
    #[doc(alias = "get_width")]
    fn width(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_insert_row")]
    fn insert_row(&self, index: libc::c_long) -> Result<DOMHTMLElement, glib::Error>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_set_align")]
    fn set_align(&self, value: &str);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_set_bg_color")]
    fn set_bg_color(&self, value: &str);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_set_border")]
    fn set_border(&self, value: &str);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_set_caption")]
    fn set_caption(&self, value: &impl IsA<DOMHTMLTableCaptionElement>) -> Result<(), glib::Error>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_set_cell_padding")]
    fn set_cell_padding(&self, value: &str);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_set_cell_spacing")]
    fn set_cell_spacing(&self, value: &str);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_set_rules")]
    fn set_rules(&self, value: &str);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_set_summary")]
    fn set_summary(&self, value: &str);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_set_t_foot")]
    fn set_t_foot(&self, value: &impl IsA<DOMHTMLTableSectionElement>) -> Result<(), glib::Error>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_set_t_head")]
    fn set_t_head(&self, value: &impl IsA<DOMHTMLTableSectionElement>) -> Result<(), glib::Error>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_table_element_set_width")]
    fn set_width(&self, value: &str);

    #[doc(alias = "align")]
    fn connect_align_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "bg-color")]
    fn connect_bg_color_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "border")]
    fn connect_border_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "caption")]
    fn connect_caption_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "cell-padding")]
    fn connect_cell_padding_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "cell-spacing")]
    fn connect_cell_spacing_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "rows")]
    fn connect_rows_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "rules")]
    fn connect_rules_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "summary")]
    fn connect_summary_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "t-bodies")]
    fn connect_t_bodies_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "t-foot")]
    fn connect_t_foot_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "t-head")]
    fn connect_t_head_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "width")]
    fn connect_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DOMHTMLTableElement>> DOMHTMLTableElementExt for O {
    fn create_caption(&self) -> Option<DOMHTMLElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_html_table_element_create_caption(self.as_ref().to_glib_none().0))
        }
    }

    fn create_t_foot(&self) -> Option<DOMHTMLElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_html_table_element_create_t_foot(self.as_ref().to_glib_none().0))
        }
    }

    fn create_t_head(&self) -> Option<DOMHTMLElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_html_table_element_create_t_head(self.as_ref().to_glib_none().0))
        }
    }

    fn delete_caption(&self) {
        unsafe {
            ffi::webkit_dom_html_table_element_delete_caption(self.as_ref().to_glib_none().0);
        }
    }

    fn delete_row(&self, index: libc::c_long) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_html_table_element_delete_row(self.as_ref().to_glib_none().0, index, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn delete_t_foot(&self) {
        unsafe {
            ffi::webkit_dom_html_table_element_delete_t_foot(self.as_ref().to_glib_none().0);
        }
    }

    fn delete_t_head(&self) {
        unsafe {
            ffi::webkit_dom_html_table_element_delete_t_head(self.as_ref().to_glib_none().0);
        }
    }

    fn align(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_element_get_align(self.as_ref().to_glib_none().0))
        }
    }

    fn bg_color(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_element_get_bg_color(self.as_ref().to_glib_none().0))
        }
    }

    fn border(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_element_get_border(self.as_ref().to_glib_none().0))
        }
    }

    fn caption(&self) -> Option<DOMHTMLTableCaptionElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_html_table_element_get_caption(self.as_ref().to_glib_none().0))
        }
    }

    fn cell_padding(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_element_get_cell_padding(self.as_ref().to_glib_none().0))
        }
    }

    fn cell_spacing(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_element_get_cell_spacing(self.as_ref().to_glib_none().0))
        }
    }

    fn rows(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_element_get_rows(self.as_ref().to_glib_none().0))
        }
    }

    fn rules(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_element_get_rules(self.as_ref().to_glib_none().0))
        }
    }

    fn summary(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_element_get_summary(self.as_ref().to_glib_none().0))
        }
    }

    fn t_bodies(&self) -> Option<DOMHTMLCollection> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_element_get_t_bodies(self.as_ref().to_glib_none().0))
        }
    }

    fn t_foot(&self) -> Option<DOMHTMLTableSectionElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_html_table_element_get_t_foot(self.as_ref().to_glib_none().0))
        }
    }

    fn t_head(&self) -> Option<DOMHTMLTableSectionElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_html_table_element_get_t_head(self.as_ref().to_glib_none().0))
        }
    }

    fn width(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_table_element_get_width(self.as_ref().to_glib_none().0))
        }
    }

    fn insert_row(&self, index: libc::c_long) -> Result<DOMHTMLElement, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::webkit_dom_html_table_element_insert_row(self.as_ref().to_glib_none().0, index, &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_align(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_table_element_set_align(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_bg_color(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_table_element_set_bg_color(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_border(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_table_element_set_border(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_caption(&self, value: &impl IsA<DOMHTMLTableCaptionElement>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_html_table_element_set_caption(self.as_ref().to_glib_none().0, value.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_cell_padding(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_table_element_set_cell_padding(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_cell_spacing(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_table_element_set_cell_spacing(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_rules(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_table_element_set_rules(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_summary(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_table_element_set_summary(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_t_foot(&self, value: &impl IsA<DOMHTMLTableSectionElement>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_html_table_element_set_t_foot(self.as_ref().to_glib_none().0, value.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_t_head(&self, value: &impl IsA<DOMHTMLTableSectionElement>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::webkit_dom_html_table_element_set_t_head(self.as_ref().to_glib_none().0, value.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_width(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_table_element_set_width(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn connect_align_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_align_trampoline<P: IsA<DOMHTMLTableElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTableElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTableElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::align\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_align_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_bg_color_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_bg_color_trampoline<P: IsA<DOMHTMLTableElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTableElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTableElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::bg-color\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_bg_color_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_border_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_border_trampoline<P: IsA<DOMHTMLTableElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTableElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTableElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::border\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_border_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_caption_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_caption_trampoline<P: IsA<DOMHTMLTableElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTableElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTableElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::caption\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_caption_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_cell_padding_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cell_padding_trampoline<P: IsA<DOMHTMLTableElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTableElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTableElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::cell-padding\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_cell_padding_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_cell_spacing_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cell_spacing_trampoline<P: IsA<DOMHTMLTableElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTableElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTableElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::cell-spacing\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_cell_spacing_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_rows_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_rows_trampoline<P: IsA<DOMHTMLTableElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTableElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTableElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::rows\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_rows_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_rules_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_rules_trampoline<P: IsA<DOMHTMLTableElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTableElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTableElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::rules\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_rules_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_summary_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_summary_trampoline<P: IsA<DOMHTMLTableElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTableElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTableElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::summary\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_summary_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_t_bodies_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_t_bodies_trampoline<P: IsA<DOMHTMLTableElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTableElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTableElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::t-bodies\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_t_bodies_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_t_foot_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_t_foot_trampoline<P: IsA<DOMHTMLTableElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTableElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTableElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::t-foot\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_t_foot_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_t_head_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_t_head_trampoline<P: IsA<DOMHTMLTableElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTableElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTableElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::t-head\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_t_head_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_width_trampoline<P: IsA<DOMHTMLTableElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTableElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTableElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::width\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_width_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for DOMHTMLTableElement {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DOMHTMLTableElement")
    }
}
