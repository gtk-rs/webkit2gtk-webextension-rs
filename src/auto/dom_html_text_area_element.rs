// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::DOMElement;
use crate::DOMEventTarget;
use crate::DOMHTMLElement;
use crate::DOMHTMLFormElement;
use crate::DOMNode;
use crate::DOMObject;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "WebKitDOMHTMLTextAreaElement")]
    pub struct DOMHTMLTextAreaElement(Object<ffi::WebKitDOMHTMLTextAreaElement, ffi::WebKitDOMHTMLTextAreaElementClass>) @extends DOMHTMLElement, DOMElement, DOMNode, DOMObject, @implements DOMEventTarget;

    match fn {
        type_ => || ffi::webkit_dom_html_text_area_element_get_type(),
    }
}

impl DOMHTMLTextAreaElement {
        pub const NONE: Option<&'static DOMHTMLTextAreaElement> = None;
    
}

pub trait DOMHTMLTextAreaElementExt: 'static {
    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_get_area_type")]
    #[doc(alias = "get_area_type")]
    fn area_type(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_get_autofocus")]
    #[doc(alias = "get_autofocus")]
    fn is_autofocus(&self) -> bool;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_get_cols")]
    #[doc(alias = "get_cols")]
    fn cols(&self) -> libc::c_long;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_get_default_value")]
    #[doc(alias = "get_default_value")]
    fn default_value(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_get_disabled")]
    #[doc(alias = "get_disabled")]
    fn is_disabled(&self) -> bool;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_get_form")]
    #[doc(alias = "get_form")]
    fn form(&self) -> Option<DOMHTMLFormElement>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_get_read_only")]
    #[doc(alias = "get_read_only")]
    fn is_read_only(&self) -> bool;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_get_rows")]
    #[doc(alias = "get_rows")]
    fn rows(&self) -> libc::c_long;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_get_selection_end")]
    #[doc(alias = "get_selection_end")]
    fn selection_end(&self) -> libc::c_long;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_get_selection_start")]
    #[doc(alias = "get_selection_start")]
    fn selection_start(&self) -> libc::c_long;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_get_value")]
    #[doc(alias = "get_value")]
    fn value(&self) -> Option<glib::GString>;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_get_will_validate")]
    #[doc(alias = "get_will_validate")]
    fn is_will_validate(&self) -> bool;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_is_edited")]
    fn is_edited(&self) -> bool;

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_select")]
    fn select(&self);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_set_autofocus")]
    fn set_autofocus(&self, value: bool);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_set_cols")]
    fn set_cols(&self, value: libc::c_long);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_set_default_value")]
    fn set_default_value(&self, value: &str);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_set_disabled")]
    fn set_disabled(&self, value: bool);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_set_name")]
    fn set_name(&self, value: &str);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_set_read_only")]
    fn set_read_only(&self, value: bool);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_set_rows")]
    fn set_rows(&self, value: libc::c_long);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_set_selection_end")]
    fn set_selection_end(&self, value: libc::c_long);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_set_selection_range")]
    fn set_selection_range(&self, start: libc::c_long, end: libc::c_long, direction: &str);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_set_selection_start")]
    fn set_selection_start(&self, value: libc::c_long);

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[doc(alias = "webkit_dom_html_text_area_element_set_value")]
    fn set_value(&self, value: &str);

    #[doc(alias = "type")]
    fn type_(&self) -> Option<glib::GString>;

    #[doc(alias = "autofocus")]
    fn connect_autofocus_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "cols")]
    fn connect_cols_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "default-value")]
    fn connect_default_value_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "disabled")]
    fn connect_disabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "form")]
    fn connect_form_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "name")]
    fn connect_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "read-only")]
    fn connect_read_only_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "rows")]
    fn connect_rows_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "selection-end")]
    fn connect_selection_end_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "selection-start")]
    fn connect_selection_start_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "type")]
    fn connect_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "value")]
    fn connect_value_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "will-validate")]
    fn connect_will_validate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DOMHTMLTextAreaElement>> DOMHTMLTextAreaElementExt for O {
    fn area_type(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_text_area_element_get_area_type(self.as_ref().to_glib_none().0))
        }
    }

    fn is_autofocus(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_text_area_element_get_autofocus(self.as_ref().to_glib_none().0))
        }
    }

    fn cols(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_html_text_area_element_get_cols(self.as_ref().to_glib_none().0)
        }
    }

    fn default_value(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_text_area_element_get_default_value(self.as_ref().to_glib_none().0))
        }
    }

    fn is_disabled(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_text_area_element_get_disabled(self.as_ref().to_glib_none().0))
        }
    }

    fn form(&self) -> Option<DOMHTMLFormElement> {
        unsafe {
            from_glib_none(ffi::webkit_dom_html_text_area_element_get_form(self.as_ref().to_glib_none().0))
        }
    }

    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_text_area_element_get_name(self.as_ref().to_glib_none().0))
        }
    }

    fn is_read_only(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_text_area_element_get_read_only(self.as_ref().to_glib_none().0))
        }
    }

    fn rows(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_html_text_area_element_get_rows(self.as_ref().to_glib_none().0)
        }
    }

    fn selection_end(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_html_text_area_element_get_selection_end(self.as_ref().to_glib_none().0)
        }
    }

    fn selection_start(&self) -> libc::c_long {
        unsafe {
            ffi::webkit_dom_html_text_area_element_get_selection_start(self.as_ref().to_glib_none().0)
        }
    }

    fn value(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_text_area_element_get_value(self.as_ref().to_glib_none().0))
        }
    }

    fn is_will_validate(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_text_area_element_get_will_validate(self.as_ref().to_glib_none().0))
        }
    }

    fn is_edited(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_text_area_element_is_edited(self.as_ref().to_glib_none().0))
        }
    }

    fn select(&self) {
        unsafe {
            ffi::webkit_dom_html_text_area_element_select(self.as_ref().to_glib_none().0);
        }
    }

    fn set_autofocus(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_html_text_area_element_set_autofocus(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    fn set_cols(&self, value: libc::c_long) {
        unsafe {
            ffi::webkit_dom_html_text_area_element_set_cols(self.as_ref().to_glib_none().0, value);
        }
    }

    fn set_default_value(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_text_area_element_set_default_value(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_disabled(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_html_text_area_element_set_disabled(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    fn set_name(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_text_area_element_set_name(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_read_only(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_html_text_area_element_set_read_only(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    fn set_rows(&self, value: libc::c_long) {
        unsafe {
            ffi::webkit_dom_html_text_area_element_set_rows(self.as_ref().to_glib_none().0, value);
        }
    }

    fn set_selection_end(&self, value: libc::c_long) {
        unsafe {
            ffi::webkit_dom_html_text_area_element_set_selection_end(self.as_ref().to_glib_none().0, value);
        }
    }

    fn set_selection_range(&self, start: libc::c_long, end: libc::c_long, direction: &str) {
        unsafe {
            ffi::webkit_dom_html_text_area_element_set_selection_range(self.as_ref().to_glib_none().0, start, end, direction.to_glib_none().0);
        }
    }

    fn set_selection_start(&self, value: libc::c_long) {
        unsafe {
            ffi::webkit_dom_html_text_area_element_set_selection_start(self.as_ref().to_glib_none().0, value);
        }
    }

    fn set_value(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_text_area_element_set_value(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn type_(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self.as_ref(), "type")
    }

    fn connect_autofocus_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_autofocus_trampoline<P: IsA<DOMHTMLTextAreaElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTextAreaElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTextAreaElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::autofocus\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_autofocus_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_cols_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cols_trampoline<P: IsA<DOMHTMLTextAreaElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTextAreaElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTextAreaElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::cols\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_cols_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_default_value_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_default_value_trampoline<P: IsA<DOMHTMLTextAreaElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTextAreaElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTextAreaElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::default-value\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_default_value_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_disabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_disabled_trampoline<P: IsA<DOMHTMLTextAreaElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTextAreaElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTextAreaElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::disabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_disabled_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_form_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_form_trampoline<P: IsA<DOMHTMLTextAreaElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTextAreaElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTextAreaElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::form\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_form_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<P: IsA<DOMHTMLTextAreaElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTextAreaElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTextAreaElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_name_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_read_only_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_read_only_trampoline<P: IsA<DOMHTMLTextAreaElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTextAreaElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTextAreaElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::read-only\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_read_only_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_rows_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_rows_trampoline<P: IsA<DOMHTMLTextAreaElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTextAreaElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTextAreaElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::rows\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_rows_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_selection_end_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_selection_end_trampoline<P: IsA<DOMHTMLTextAreaElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTextAreaElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTextAreaElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::selection-end\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_selection_end_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_selection_start_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_selection_start_trampoline<P: IsA<DOMHTMLTextAreaElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTextAreaElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTextAreaElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::selection-start\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_selection_start_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_type_trampoline<P: IsA<DOMHTMLTextAreaElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTextAreaElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTextAreaElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::type\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_type_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_value_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_value_trampoline<P: IsA<DOMHTMLTextAreaElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTextAreaElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTextAreaElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::value\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_value_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_will_validate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_will_validate_trampoline<P: IsA<DOMHTMLTextAreaElement>, F: Fn(&P) + 'static>(this: *mut ffi::WebKitDOMHTMLTextAreaElement, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLTextAreaElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::will-validate\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_will_validate_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for DOMHTMLTextAreaElement {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DOMHTMLTextAreaElement")
    }
}
